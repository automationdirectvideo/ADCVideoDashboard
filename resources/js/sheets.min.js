function recordYearlyCategoryViews(e){let t=lsGet("categoryStats"),s={},a=[];for(var r=1;r<e.length;r+=2){let t=e[r][0].substr(0,4);a.push(t)}s.years=a;let i=new Array(a.length).fill(0);for(var o=1;o<e[0].length;o++){let a=e[0][o],h=!1;for(var n=0;0==h&&n<t.length;)t[n].categoryId==a&&(h=t[n]),n++;let u=h.root;if(u&&"A"!=a){let t=[],n=[],u=[],p=[];for(r=1;r<e.length;r+=2){let s=parseInt(e[r][o]),a=parseInt(e[r+1][o]);t.push(s);let h=0;1!=r&&(h=parseInt(u[(r-1)/2-1]));let l=h+s;u.push(l);let d=0,g=0;0!=a&&(d=(s/a).toFixed(0),g=(l/a).toFixed(0)),n.push(d),p.push(g),i[(r-1)/2]+=parseInt(s)}s[a]={name:h.shortName,viewTrace:t,avgViewTrace:n,cumulativeViews:u,cumulativeAvgViewTrace:p}}}return s.totals=i,s}function saveCategoryStatsToSheets(e){for(var t=[["Category ID","Name","Short Name","Views","Likes","Duration (sec)","Strength","Average Video Views","Average Video Likes","Average Video Duration","Videos","Root","Leaf"]],s=0;s<e.length;s++){var a=[];a.push(e[s].categoryId),a.push(e[s].name),a.push(e[s].shortName),a.push(e[s].views),a.push(e[s].likes),a.push(e[s].duration),a.push(e[s].avgStrength),a.push(e[s].avgViews),a.push(e[s].avgLikes),a.push(e[s].avgDuration),a.push(e[s].videos.join(",")),a.push(e[s].root),a.push(e[s].leaf),t.push(a)}var r={values:t};const i=clearSpreadsheet("Stats","Category Stats").then(e=>updateSheetData("Stats","Category Stats",r));return i}function saveCategoryYearlyStatsToSheets(e,t){var s=sheetNameToId("Stats"),a={spreadsheetId:s,range:"Category Views By Year"};return gapi.client.sheets.spreadsheets.values.get(a).then(s=>{if(s){sheetValues=s.result.values;let i=sheetValues[0],o=[];o.push(t+" Views");let n=[];n.push(t+" Number of Videos");for(let t=1;t<i.length;t++){let s=i[t],a=e[s],r=parseInt(a.views),h=parseInt(a.numVideos);o.push(r),n.push(h)}for(startingRowIndex=2*(t-2010)+1;sheetValues.length<startingRowIndex+2;)sheetValues.push([]);sheetValues[startingRowIndex]=o,sheetValues[startingRowIndex+1]=n;var a={values:sheetValues},r="Category Views By Year";updateSheetData("Stats",r,a)}}).catch(e=>{console.error("Category Views By Year Google Sheet not found",e),recordError(e)})}function saveVideoStatsToSheets(e){var t=[["Video ID","Title","Views","Likes","Dislikes","Duration (sec)","Comments","YouTube Publish Date","Categories","Created By","Organic","Strength","Average View Duration","Average View Percentage","Average Views Per Day","Days Since Published","Subscribers Gained","Likes Per View","Dislikes Per View"]];const s=lsGet("statsByVideoId");for(var a=0;a<e.length;a++){var r=e[a].videoId,i=[r,s[r].title,e[a].views,e[a].likes,e[a].dislikes,s[r].duration,e[a].comments,e[a].publishDate,s[r].categories.join(","),s[r].createdBy,s[r].organic,e[a].strength,e[a].avgViewDuration,e[a].avgViewPercentage,e[a].avgViewsPerDay,e[a].daysSincePublished,e[a].subscribersGained,e[a].likesPerView,e[a].dislikesPerView];t.push(i)}const o={values:t},n=clearSpreadsheet("Stats","Video Stats").then(e=>updateSheetData("Stats","Video Stats",o));return n}function saveGraphDataToSheets(e,t){var s=!1;if(null==e){e=lsGet("graphData");s=!0}t=t||"Graph Data";var a=[["Graph ID","Data","Layout","Config","Graph Height","Graph Width","Automargin"]];for(var r in e)if(e.hasOwnProperty(r)){var i=[];i.push(r),i.push(JSON.stringify(e[r].data)),i.push(JSON.stringify(e[r].layout)),i.push(JSON.stringify(e[r].config)),i.push(e[r].graphHeight),i.push(e[r].graphWidth),i.push(JSON.stringify(e[r].automargin)),a.push(i)}const o={values:a};clearSpreadsheet("Stats",t).then(e=>updateSheetData("Stats",t,o));s&&localStorage.removeItem("graphData")}function saveTopVideoStatsToSheets(e){var t=[["Video ID","Dashboard ID","Title","Duration","Publish Date","Thumbnail","Views","Subscribers Gained","Average View Duration","Estimated Minutes Watched","Comments","Likes","Dislikes"]];for(const a in e)if(e.hasOwnProperty(a)){const r=e[a];var s=[];s.push(a),s.push(r.dashboardId),s.push(r.title),s.push(r.duration),s.push(r.publishDate),s.push(r.thumbnail),s.push(r.views),s.push(r.subscribersGained),s.push(r.avgViewDuration),s.push(r.minutesWatched),s.push(r.comments),s.push(r.likes),s.push(r.dislikes),t.push(s)}const a={values:t},r=updateSheetData("Stats","Top Video Stats",a);return r}function saveRealTimeStatsToSheets(e){var t=[["Time Range","Views","Estimated Minutes Watched","Average View Duration","Subscribers Gained"]];for(const a in e)if(e.hasOwnProperty(a)){var s=[];s.push(a),s.push(e[a].views),s.push(e[a].estimatedMinutesWatched),s.push(e[a].averageViewDuration),s.push(e[a].netSubscribersGained),t.push(s)}const a={values:t},r=updateSheetData("Stats","Real Time Stats",a);return r}function saveVideographerStatsToSheets(e=lsGet("videographers")){let t=["Label","avgComments","avgDislikes","avgDuration","avgLikeRatio","avgLikes","avgSubsGained","avgViewPercentage","avgViewPercentageLastXDays","avgViews","cumLikeRatio","minWatched","minWatchedLastXDays","numVideos","numVideosLastXDays","totalComments","totalDislikes","totalDuration","totalLikeRatio","totalLikes","totalSubsGained","totalViews"],s=[t];for(const a in e)if(e.hasOwnProperty(a)){const r=e[a];for(const e in r)if(r.hasOwnProperty(e)){const i=r[e],o=a+"-"+e;let n=[o];for(let e=1;e<t.length;e++){const s=t[e];n.push(i[s])}s.push(n)}}const a={values:s},r=updateSheetData("Stats","Videographer Stats",a);return r}function saveVideographerViewsToSheets(e){let t=[],s={};for(const a in e)if(e.hasOwnProperty(a)){const r=e[a];for(const e in r)if(r.hasOwnProperty(e)){const i=r[e].monthlyViews,o=a+"-"+e;t.push(o);for(const e in i)if(i.hasOwnProperty(e)){const t=i[e];s[e]||(s[e]={}),s[e][o]=t}}}let a=[];for(const e in s)if(s.hasOwnProperty(e)){const r=s[e];let i=[e];t.forEach(e=>{const t=r[e];i.push(t)}),a.push(i)}t.unshift("Month"),a.unshift(t);const r={values:a},i=updateSheetData("Stats","Videographer Monthly Views",r);return i}function getCardPerformanceForCurrMonth(){const[e,t,s]=getCurrMonth(),a=requestCardPerformance(e,t,s);return a.then(e=>{const t={values:[e]},a=3+monthDiff(new Date(2017,9),new Date(s)),r="Card Performance!A"+a;return updateSheetData("Stats",r,t)})}function getTopTenVideosForCurrMonth(){const[e,t,s]=getCurrMonth(),a=requestMostWatchedVideos(e,t,20,s);return a.then(e=>{const t={values:e},a=3+monthDiff(new Date(2010,6),new Date(s)),r="Top Ten Videos!A"+a;return updateSheetData("Stats",r,t).then(e=>"Updated Top Ten Video Sheet")})}function getVideographerViewsForCurrMonth(){const[e,t,s]=getCurrMonth(),a=lsGet("videographers");return requestVideographerViewsForMonth(a,e).then(e=>saveVideographerViewsToSheets(e))}