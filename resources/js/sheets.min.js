function saveCategoryStatsToSheets(e){for(var t=[["Category ID","Name","Short Name","Views","Likes","Duration (sec)","Strength","Average Video Views","Average Video Likes","Average Video Duration","Videos","Videos With Strength","Root","Leaf"]],s=0;s<e.length;s++){var a=[];a.push(e[s].categoryId),a.push(e[s].name),a.push(e[s].shortName),a.push(e[s].views),a.push(e[s].likes),a.push(e[s].duration),a.push(e[s].avgStrength),a.push(e[s].avgViews),a.push(e[s].avgLikes),a.push(e[s].avgDuration),a.push(e[s].videos.join(",")),a.push(e[s].videosWithStrength.join(",")),a.push(e[s].root),a.push(e[s].leaf),t.push(a)}var r={values:t};const o=clearSpreadsheet("Stats","Category Stats").then(e=>updateSheetData("Stats","Category Stats",r));return o}function saveCategoryYearlyStatsToSheets(e,t){var s=sheetNameToId("Stats"),a={spreadsheetId:s,range:"Category Views By Year"};return gapi.client.sheets.spreadsheets.values.get(a).then(s=>{if(s){sheetValues=s.result.values;let o=sheetValues[0],i=[];i.push(t+" Views");let n=[];n.push(t+" Number of Videos");for(let t=1;t<o.length;t++){let s=o[t],a=e[s],r=parseInt(a.views),h=parseInt(a.numVideos);i.push(r),n.push(h)}for(startingRowIndex=2*(t-2010)+1;sheetValues.length<startingRowIndex+2;)sheetValues.push([]);sheetValues[startingRowIndex]=i,sheetValues[startingRowIndex+1]=n;var a={values:sheetValues},r="Category Views By Year";updateSheetData("Stats",r,a)}}).catch(e=>{console.error("Category Views By Year Google Sheet not found",e),recordError(e)})}function saveVideoStatsToSheets(e){var t=[["Video ID","Title","Views","Likes","Dislikes","Duration (sec)","Comments","YouTube Publish Date","Categories","Created By","Organic","Strength","Average View Duration","Average View Percentage","Average Views Per Day","Days Since Published","Subscribers Gained","Likes Per View","Dislikes Per View"]];const s=lsGet("statsByVideoId");for(var a=0;a<e.length;a++){var r=e[a].videoId,o=[r,s[r].title,e[a].views,e[a].likes,e[a].dislikes,s[r].duration,e[a].comments,e[a].publishDate,s[r].categories.join(","),s[r].createdBy,s[r].organic,e[a].strength,e[a].avgViewDuration,e[a].avgViewPercentage,e[a].avgViewsPerDay,e[a].daysSincePublished,e[a].subscribersGained,e[a].likesPerView,e[a].dislikesPerView];t.push(o)}const i={values:t},n=clearSpreadsheet("Stats","Video Stats").then(e=>updateSheetData("Stats","Video Stats",i));return n}function saveGraphDataToSheets(e,t){var s=!1;if(null==e){e=lsGet("graphData");s=!0}t=t||"Graph Data";var a=[["Graph ID","Data","Layout","Config","Graph Height","Graph Width","Automargin"]];for(var r in e)if(e.hasOwnProperty(r)){var o=[];o.push(r),o.push(JSON.stringify(e[r].data)),o.push(JSON.stringify(e[r].layout)),o.push(JSON.stringify(e[r].config)),o.push(e[r].graphHeight),o.push(e[r].graphWidth),o.push(JSON.stringify(e[r].automargin)),a.push(o)}const i={values:a};clearSpreadsheet("Stats",t).then(e=>updateSheetData("Stats",t,i));s&&lsRemove("graphData")}function saveTopVideoStatsToSheets(e){var t=[["Video ID","Dashboard ID","Title","Duration","Publish Date","Thumbnail","Views","Subscribers Gained","Average View Duration","Estimated Minutes Watched","Comments","Likes","Dislikes"]];for(const a in e)if(e.hasOwnProperty(a)){const r=e[a];var s=[];s.push(a),s.push(r.dashboardId),s.push(r.title),s.push(r.duration),s.push(r.publishDate),s.push(r.thumbnail),s.push(r.views),s.push(r.subscribersGained),s.push(r.avgViewDuration),s.push(r.minutesWatched),s.push(r.comments),s.push(r.likes),s.push(r.dislikes),t.push(s)}const a={values:t},r=updateSheetData("Stats","Top Video Stats",a);return r}function saveRealTimeStatsToSheets(e){var t=[["Time Range","Views","Estimated Minutes Watched","Average View Duration","Subscribers Gained"]];for(const a in e)if(e.hasOwnProperty(a)){var s=[];s.push(a),s.push(e[a].views),s.push(e[a].estimatedMinutesWatched),s.push(e[a].averageViewDuration),s.push(e[a].netSubscribersGained),t.push(s)}const a={values:t},r=updateSheetData("Stats","Real Time Stats",a);return r}function saveVideographerStatsToSheets(e=lsGet("videographers")){let t=["Label","avgComments","avgDislikes","avgDuration","avgLikeRatio","avgLikes","avgSubsGained","avgViewPercentage","avgViewPercentageLastXDays","avgViews","cumLikeRatio","minWatched","minWatchedLastXDays","numVideos","numVideosLastXDays","totalComments","totalDislikes","totalDuration","totalLikeRatio","totalLikes","totalSubsGained","totalViews"],s=[t];for(const a in e)if(e.hasOwnProperty(a)){const r=e[a];for(const e in r)if(r.hasOwnProperty(e)){const o=r[e],i=a+"-"+e;let n=[i];for(let e=1;e<t.length;e++){const s=t[e];n.push(o[s])}s.push(n)}}const a={values:s},r=updateSheetData("Stats","Videographer Stats",a);return r}function saveVideographerViewsToSheets(e){let t=[],s={},a=Object.keys(e);a.sort(),a.forEach(a=>{const r=e[a];for(const e in r)if(r.hasOwnProperty(e)){const o=r[e].monthlyViews,i=a+"-"+e;t.push(i);for(const e in o)if(o.hasOwnProperty(e)){const t=o[e];s[e]||(s[e]={}),s[e][i]=t}}});let r=[];for(const e in s)if(s.hasOwnProperty(e)){const a=s[e];let o=[e];t.forEach(e=>{const t=a[e];o.push(t)}),r.push(o)}r.sort(function(e,t){return new Date(e[0])-new Date(t[0])}),t.unshift("Month"),r.unshift(t);const o={values:r},i=clearSpreadsheet("Stats","Category Stats").then(e=>updateSheetData("Stats","Videographer Monthly Views",o));return i}function clearSpreadsheet(e,t){const s=sheetNameToId(e);if(""!=s){const e={spreadsheetId:s,range:t},a=gapi.client.sheets.spreadsheets.values.clear(e).then(e=>{const s=`Spreadsheet Cleared: ${t}`;return console.log(s),Promise.resolve(s)}).catch(e=>{const s=`Unable to get sheet: "${t}"`;console.error(s,e),recordError(e,s)});return a}{const t=`No spreadsheet exists with sheetName: "${e}"`;console.error(t);const s=new Error(t);recordError(s)}}function requestSpreadsheetData(e,t){const s=sheetNameToId(e);if(""!=s){const e={spreadsheetId:s,range:t},a=gapi.client.sheets.spreadsheets.values.get(e).then(e=>(console.log(`SpreadsheetData: ${t}`),Promise.resolve(e.result.values))).catch(e=>{const s=`Unable to get sheet: "${t}"`;console.error(s,e),recordError(e,s)});return a}{const t=`No spreadsheet exists with sheetName: "${e}"`;console.error(t);const s=new Error(t);return recordError(s),Promise.reject(t)}}function updateSheetData(e,t,s){const a=sheetNameToId(e);if(""!=a){const e={spreadsheetId:a,range:t,valueInputOption:"RAW",resource:s},r=gapi.client.sheets.spreadsheets.values.update(e).then(e=>(console.log(`UpdateSheetData: ${t}`),Promise.resolve(e))).catch(e=>{const s=`Unable to update sheet: "${t}" - `;console.error(s,e),recordError(e,s)});return r}{const t=`No spreadsheet exists with sheetName: "${e}"`;console.error(t);const s=new Error(t);recordError(s)}}