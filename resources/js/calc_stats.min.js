function updateVideoAndCategoryStats(){const e=getCategoryList(),t=getVideoList();return Promise.all([e,t]).then(e=>{e[0],e[1][0];const t=e[1][1];return getAllVideoStats(t)}).then(e=>getTopTenVideosForCurrMonth())}function getCategoryList(){return requestSpreadsheetData("Input Data","Category List").then(e=>{let t={};const s=getColumnHeaders(e);for(let a=1;a<e.length;a++){const o=e[a];let r=o[s["Category ID"]];const i=o[s["L1 Category"]],n=o[s["L2 Category"]],l=o[s["L3 Category"]];let d="";const c=o[s["Short Name"]];let g=!1;const u=!0;if(/\d/.test(r)){const e=r.match(/[A-Z]+/)[0];if(t[e].leaf=!1,d=t[e].name+"->"+n,""!=r.replace(/[A-Z]+[0-9]+/,"")){const e=r.match(/[A-Z]+[0-9]+/)[0];t[e].leaf=!1,d=t[e].name+"->"+l}}else g=!0,d=i;t[r]={shortName:c,name:d,root:g,leaf:u,views:0,likes:0,duration:0,videos:[],videosWithStrength:[],strength:0}}return lsSet("categoryTotals",t),t})}function getVideoList(){return requestSpreadsheetData("Input Data","Video List").then(e=>{let t={},s=[],a={};const o=e[0];for(let e=0;e<o.length;e++)a[o[e]]=e;for(let o=1;o<e.length;o++){const r=e[o],i="TRUE"===r[a.Organic],n=r[a["Video ID"]],l=r[a.Title],d=r[a["Publish Date"]],c=r[a.Duration];let g=r[a.Categories];const u=r[a["Created By"]]||"Unknown",h=r[a.Privacy].toLowerCase();g=g.replace(/\s/g,"");const p=g.split(",");let v=[];for(let e=0;e<p.length;e++){let t=p[e];if(-1==v.indexOf(t)&&v.push(t),/\d/.test(t)){const e=t.match(/[A-Z]+/)[0];if(-1==v.indexOf(e)&&v.push(e),""!=t.replace(/[A-Z]+[0-9]+/,"")){const e=t.match(/[A-Z]+[0-9]+/)[0];-1==v.indexOf(e)&&v.push(e)}}}t[n]={categories:v,createdBy:u,duration:c,organic:i,privacy:h,publishDate:d,title:l},s.push(n)}return lsSet("statsByVideoId",t),lsSet("uploads",s),[t,s]})}function getCategoryStats(){return requestSpreadsheetData("Stats","Category Stats").then(e=>{const t=getColumnHeaders(e);let s=[];for(let a=1;a<e.length;a++){const o=e[a],r=o[t["Category ID"]],i=o[t.Name],n=o[t["Short Name"]],l=parseInt(o[t.Views]),d=parseInt(o[t.Likes]),c=parseInt(o[t["Duration (sec)"]]),g=parseFloat(o[t["Average Video Views"]]),u=parseFloat(o[t["Average Video Likes"]]),h=parseFloat(o[t["Average Video Duration"]]),p=parseFloat(o[t.Strength]),v=o[t.Videos],S=v.split(","),y=o[t["Videos With Strength"]],V=y.split(","),m="TRUE"===o[t.Root],f="TRUE"===o[t.Leaf];s.push({categoryId:r,name:i,shortName:n,views:l,likes:d,duration:c,avgViews:g,avgLikes:u,avgDuration:h,avgStrength:p,videos:S,videosWithStrength:V,root:m,leaf:f})}return lsSet("categoryStats",s),s})}function getVideoStats(){return requestSpreadsheetData("Stats","Video Stats").then(e=>{const t=getColumnHeaders(e);let s=[],a=[],o={};for(let r=1;r<e.length;r++){const i=e[r],n=i[t["Video ID"]],l=i[t.Title],d=parseInt(i[t.Views]),c=parseInt(i[t.Likes]),g=parseInt(i[t.Dislikes]),u=parseInt(i[t["Duration (sec)"]]),h=parseInt(i[t.Comments]),p=i[t["YouTube Publish Date"]].substr(0,10),v=i[t.Categories].replace(/\s/g,""),S=i[t["Created By"]],y="TRUE"===i[t.Organic],V=parseFloat(i[t.Strength]),m=parseInt(i[t["Average View Duration"]]),f=parseFloat(i[t["Average View Percentage"]]),w=parseFloat(i[t["Average Views Per Day"]]),D=parseInt(i[t["Days Since Published"]]),P=parseInt(i[t["Subscribers Gained"]]),k=parseFloat(i[t["Likes Per View"]]),I=parseFloat(i[t["Dislikes Per View"]]),b={videoId:n,views:d,likes:c,dislikes:g,comments:h,duration:u,strength:V,avgViewDuration:m,avgViewPercentage:f,avgViewsPerDay:w,daysSincePublished:D,subscribersGained:P,likesPerView:k,dislikesPerView:I,organic:y};a.push(b),o[n]||(o[n]={}),o[n].title=l,o[n].publishDate=p,o[n].duration=u,o[n].categories=v,o[n].createdBy=S,o[n].organic=y,s.push(n)}lsSet("allVideoStats",a),lsSet("statsByVideoId",o),lsSet("uploads",s)})}function getBasicDashboardStats(){let e=[];return e.push(getCategoryStats()),e.push(getVideoStats()),e.push(getVideoStrengthWeights()),Promise.all(e)}function getVideoStrengthWeights(){return requestSpreadsheetData("Input Data","Video Strength Calculation").then(e=>{let t={},s={},a=getColumnHeaders(e),o=1,r=e[o];for(;o<e.length&&0!=r.length;){let s=r[a["Short Name"]],i=parseFloat(r[a.Weight]);t[s]=i,o++,r=e[o]}for(o++;o<e.length;){r=e[o];let t=r[a["Short Name"]],i=parseFloat(r[a.Weight]);s[t]=i,o++}return s.weights=t,lsSet("strengthCalc",s),Promise.resolve(s)})}function updateCategoryTotals(e){let t=lsGet("statsByVideoId"),s=lsGet("categoryTotals");return e.forEach(e=>{let a=e.videoId,o=e.duration,r=e.views,i=e.likes,n=e.strength;t[a].duration=o;let l=t[a].categories;for(let e=0;e<l.length;e++){let t=l[e];null==s[t]&&(s[t]={},s[t].strength=0,s[t].videos=[],s[t].videosWithStrength=[]);let d=s[t],c=parseInt(d.views),g=parseInt(d.likes),u=parseInt(d.duration),h=parseFloat(d.strength);d.videos.push(a),d.views=c+r,d.likes=g+i,d.duration=u+o,null!=n&&(d.strength=h+n,d.videosWithStrength.push(a))}}),lsSet("categoryTotals",s),lsSet("statsByVideoId",t),s}function calcCategoryStats(e){let t=[];for(let s in e)if(e.hasOwnProperty(s)){let a=e[s],o=a.shortName,r=a.name,i=a.root,n=a.leaf,l=parseInt(a.views),d=parseInt(a.likes),c=parseInt(a.duration),g=parseFloat(a.strength),u=a.videosWithStrength,h=u.length,p=a.videos,v=p.length,S=l/v,y=d/v,V=c/v,m=g/h,f={},w={};u.forEach(e=>{const t=allVideoStats.findIndex(t=>e==t.videoId),s=allVideoStats[t],a=s.z;for(const e in a)a.hasOwnProperty(e)&&(null==f[e]&&(f[e]=0),f[e]+=a[e])});for(const e in f)if(f.hasOwnProperty(e)){const t=f[e];w[e]=t/u.length}t.push({avgDuration:V,avgLikes:y,avgViews:S,categoryId:s,duration:c,leaf:n,likes:d,name:r,root:i,shortName:o,totalStrength:g,avgStrength:m,videos:p,videosWithStrength:u,views:l,z:w})}return lsSet("categoryStats",t),t}function average(e){const t=e.reduce((e,t)=>e+t,0),s=t/e.length;return s}function standardDeviation(e,t){const s=e.map(e=>{const s=e-t,a=s**2;return a}),a=average(s),o=Math.sqrt(a);return o}function zScore(e,t,s){let a=e-t,o=a/s;return o}function zScoreForList(e){let t=average(e),s=standardDeviation(e,t),a=e.map(e=>zScore(e,t,s));return a}function zScoreByPropertyName(e,t){let s=e.map(e=>e[t]),a=zScoreForList(s),o=lsGet("strengthCalc"),r=-4,i=4;o&&(o.minZ&&(r=o.minZ),o.maxZ&&(i=o.maxZ));let n=a.map(e=>e>i?i:e<r?r:e);return n}function calcVideoStrength(e,t){const s=lsGet("statsByVideoId"),a=t.weights,o=t.numYears,r=1e3*o*60*60*24*365,i=new Date;let n=e.filter(e=>{if(s[e.videoId].organic){const t=new Date(s[e.videoId].publishDate),a=i-t;return r-a>0}return!1}),l={videoIds:n.map(e=>e.videoId),views:zScoreByPropertyName(n,"views"),avgViewsPerDay:zScoreByPropertyName(n,"avgViewsPerDay"),duration:zScoreByPropertyName(n,"duration"),comments:zScoreByPropertyName(n,"comments"),likesPerView:zScoreByPropertyName(n,"likesPerView"),dislikesPerView:zScoreByPropertyName(n,"dislikesPerView"),subscribersGained:zScoreByPropertyName(n,"subscribersGained"),avgViewDuration:zScoreByPropertyName(n,"avgViewDuration"),avgViewPercentage:zScoreByPropertyName(n,"avgViewPercentage"),daysSincePublished:zScoreByPropertyName(n,"daysSincePublished")},d=[];for(let e=0;e<l.videoIds.length;e++){const t=l.videoIds[e],s=l.views[e],o=l.avgViewsPerDay[e],r=l.duration[e],i=l.comments[e],n=l.likesPerView[e],c=l.dislikesPerView[e],g=l.subscribersGained[e],u=l.avgViewDuration[e],h=l.avgViewPercentage[e],p=l.daysSincePublished[e];let v=0;for(const t in a)if(a.hasOwnProperty(t)){const s=a[t];v+=s*l[t][e]}d.push({totalStrength:v,videoId:t,z:{views:s,avgViewsPerDay:o,duration:r,comments:i,likesPerView:n,dislikesPerView:c,subscribersGained:g,avgViewDuration:u,avgViewPercentage:h,daysSincePublished:p}})}d.sort(function(e,t){return e.totalStrength-t.totalStrength});let c=zScoreByPropertyName(d,"totalStrength"),g=c.length,u=Math.floor(0*g),h=Math.floor(g-1),p=c[u],v=c[h]-p;0==v&&(v=1);for(let e=0;e<d.length;e++){let t=c[e],s=(t-p)/v*100;d[e].strength=s}return e.forEach(e=>{const t=e.videoId,s=e.organic;if(s){const s=d.findIndex(e=>t==e.videoId);s>=0&&(e.strength=d[s].strength,e.totalStrength=d[s].totalStrength,e.z=d[s].z)}else e.strength=void 0,e.totalStrength=void 0,e.z=void 0}),e.sort(function(e,t){return new Date(t.publishDate)-new Date(e.publishDate)}),e}function calcVideographerStats(){const e=lsGet("allVideoStats"),t=lsGet("statsByVideoId");let s={};for(let a=0;a<e.length;a++){const o=e[a],r=o.videoId,i=t[r].createdBy,n=t[r].organic;s[i]||(s[i]={all:{totalComments:0,totalDislikes:0,totalDuration:0,totalLikeRatio:0,totalLikes:0,totalSubsGained:0,totalViews:0,videos:[]},organic:{totalComments:0,totalDislikes:0,totalDuration:0,totalLikeRatio:0,totalLikes:0,totalSubsGained:0,totalViews:0,videos:[]},notOrganic:{totalComments:0,totalDislikes:0,totalDuration:0,totalLikeRatio:0,totalLikes:0,totalSubsGained:0,totalViews:0,videos:[]}});let l=[s[i].all];n?l.push(s[i].organic):l.push(s[i].notOrganic);const d=o.comments,c=o.dislikes,g=o.duration,u=o.likes/(o.likes+o.dislikes),h=o.likes,p=o.subscribersGained,v=o.views;l.forEach(e=>{e.totalComments+=d,e.totalDislikes+=c,e.totalDuration+=g,isNaN(u)||(e.totalLikeRatio+=u),e.totalLikes+=h,e.totalSubsGained+=p,e.totalViews+=v,e.videos.push(r)})}for(const e in s)if(s.hasOwnProperty(e)){const t=s[e];for(const e in t)if(t.hasOwnProperty(e)){const s=t[e];let a=s.videos.length;s.numVideos=a,0==a&&(a=1),s.avgComments=s.totalComments/a,s.avgDislikes=s.totalDislikes/a,s.avgDuration=s.totalDuration/a,s.avgLikeRatio=s.totalLikeRatio/a,s.avgLikes=s.totalLikes/a,s.avgSubsGained=s.totalSubsGained/a,s.avgViews=s.totalViews/a;let o=s.avgLikes/(s.avgLikes+s.avgDislikes);isNaN(o)&&(o=void 0),s.cumLikeRatio=o}}return s=calcVideographerVideosByMonth(s),lsSet("videographers",s),s}function calcVideographerVideosByMonth(e){const t=lsGet("statsByVideoId"),s=new Date,a=30;for(const o in e)if(e.hasOwnProperty(o)){const r=e[o];for(const e in r)if(r.hasOwnProperty(e)){const o=r[e];let i={},n={},l=0;const d=o.videos;d.forEach(e=>{const o=t[e].publishDate,r=o.substr(0,7);null==i[r]&&(i[r]=0),i[r]+=1;const d=o.substr(0,4);null==n[d]&&(n[d]=0),n[d]+=1,s-new Date(o)<=864e5*a&&l++});const c=getMonthsSince(2010,7);c.forEach(e=>{null==i[e]&&(i[e]=0)});const g=getYearsSince(2010);g.forEach(e=>{null==n[e]&&(n[e]=0)}),o.monthlyVideos=i,o.yearlyVideos=n,o.numVideosLastXDays=l}}return e}